tenant: rpidanny
app: nietzsche
service: nietzsche

plugins:
  - serverless-offline
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-plugin-include-dependencies
  - serverless-plugin-optimize

package:
  individually: true
  include:
    - src/assets/**/*
  exclude:
    - node_modules/**
    - README.md
    - package.json
    - package-lock.json

provider:
  name: aws
  runtime: nodejs8.10
  profile: default
  region: eu-west-1
  versionFunctions: false
  stage: dev
  stackTags:
    PROJECT: ${self:service}
    STAGE: ${opt:stage, self:provider.stage}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-quotes
    SNS_SCRAP_TOPIC: ${self:service}-${opt:stage, self:provider.stage}-scrap
    SQS_QUOTES: ${self:service}-${opt:stage, self:provider.stage}-quotes
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - sns:Publish
        - sns:Subscribe
      Resource: { "Fn::Join" : ["", ["arn:aws:sns:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:provider.environment.SNS_SCRAP_TOPIC}" ] ]  }
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
        - sqs:GetQueueUrl
        - sqs:ListQueues
      Resource: { "Fn::Join" : ["", ["arn:aws:sqs:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:provider.environment.SQS_QUOTES}" ] ]  }

functions:
  - ${file(functions/dispatchScrappers.yml)}
  - ${file(functions/scrapQuotes.yml)}
  - ${file(functions/saveQuotes.yml)}
  - ${file(functions/tweetQuoteText.yml)}
  - ${file(functions/tweetQuoteImage.yml)}
  - ${file(functions/getQuotesByAuthor.yml)}
  - ${file(functions/getRandomQuote.yml)}
  - ${file(functions/incrementUsedCounter.yml)}
  - ${file(functions/decideTweetMode.yml)}

resources:
  Resources:
    quotesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: author
            AttributeType: S
          - AttributeName: quoteId
            AttributeType: S
        KeySchema:
          - AttributeName: author
            KeyType: HASH
          - AttributeName: quoteId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    pagesSNSTopic:
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: ${self:provider.environment.SNS_SCRAP_TOPIC}
        TopicName: ${self:provider.environment.SNS_SCRAP_TOPIC}
    quotesQueue:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 345600
        QueueName: ${self:provider.environment.SQS_QUOTES}
        ReceiveMessageWaitTimeSeconds: 1
        VisibilityTimeout: 300

custom:
  optimize:
    includePaths: ['src/assets']

stepFunctions:
  stateMachines:
    tweetQuote:
      name: ${self:service}-${opt:stage}-tweetQuoteStateMachine
      events:
        - schedule:
            rate: cron(30 16 * * ? *)
            enabled: true
        - schedule:
            rate: cron(30 07 * * ? *)
            enabled: true
        - schedule:
            rate: cron(15 00 * * ? *)
            enabled: true
      definition:
        Comment: "Tweets random quote."
        StartAt: GET_RANDOM_QUOTE
        States:
          GET_RANDOM_QUOTE:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-getRandomQuote
            Retry:
              - ErrorEquals:
                - HandledError
                IntervalSeconds: 5
                MaxAttempts: 2
                BackoffRate: 2
              - ErrorEquals:
                - NoQuoteError
                IntervalSeconds: 5
                MaxAttempts: 2
                BackoffRate: 2
            Next: DECIDE_TWEET_MODE
          DECIDE_TWEET_MODE:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-decideTweetMode
            Catch:
              - ErrorEquals: ["LongQuoteError"] 
                Next: GET_RANDOM_QUOTE
            Next: TWEET_MODE_CHOICE
          TWEET_MODE_CHOICE:
            Type: Choice
            Choices:
            - Variable: "$.mode"
              StringEquals: "text"
              Next: TWEET_QUOTE_TEXT
            - Variable: "$.mode"
              StringEquals: 'image'
              Next: TWEET_QUOTE_IMAGE
            Default: TWEET_QUOTE_TEXT
          TWEET_QUOTE_TEXT:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-tweetQuoteText
            Catch:
              - ErrorEquals: ["LongQuoteError"] 
                Next: GET_RANDOM_QUOTE
            Next: INCREMENT_QUOTE_COUNTER
          TWEET_QUOTE_IMAGE:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-tweetQuoteImage
            Catch:
              - ErrorEquals: ["LongQuoteError"] 
                Next: GET_RANDOM_QUOTE
            Next: INCREMENT_QUOTE_COUNTER
          INCREMENT_QUOTE_COUNTER:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-incrementUsedCounter
            Retry:
              - ErrorEquals:
                - HandledError
                IntervalSeconds: 1
                MaxAttempts: 2
                BackoffRate: 2
              - ErrorEquals:
                - States.TaskFailed
                IntervalSeconds: 30
                MaxAttempts: 2
                BackoffRate: 2
              - ErrorEquals:
                - States.ALL
                IntervalSeconds: 5
                MaxAttempts: 5
                BackoffRate: 2
            End: true
